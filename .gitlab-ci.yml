stages:
  - build
  - code quality
  - dependency scanning
  - test
  - deploy

# Cache default configuration
cache: &global_cache
  key: "$CI_PIPELINE_ID"
  paths:
    - node_modules
    - public/build
    - vendor
  policy: pull


# Build section
Install dependencies and build assets:
  image: sumocoders/cli-tools-php83:latest
  script:
    - COMPOSER_MEMORY_LIMIT=-1 composer install --no-scripts --no-progress
    - COMPOSER_MEMORY_LIMIT=-1 composer run-script post-autoload-dump
    - php bin/console sass:build --quiet
    - php bin/console importmap:install --quiet
    - php bin/console fos:js-routing:dump --format=json --locale=nl --target=public/build/routes/fos_js_routes.json
  cache:
    <<: *global_cache
    policy: pull-push
  stage: build
  tags:
    - docker


# Code Quality section
PHP_CodeSniffer - check code styling:
  image: sumocoders/cli-tools-php83:latest
  script:
    - vendor/bin/phpcs --report-full --report-\\Micheh\\PhpCodeSniffer\\Report\\Gitlab=phpcs-report.xml
  artifacts:
    expire_in: 1 week
    reports:
      codequality: phpcs-report.xml
  stage: code quality
  needs: ["Install dependencies and build assets"]
  tags:
    - docker

PHPStan - check for bugs:
  image: sumocoders/cli-tools-php83:latest
  before_script:
    - bin/console cache:warmup --env=dev
  script:
    - vendor/bin/phpstan analyse --memory-limit=-1 --error-format=gitlab --no-progress --no-interaction  > phpstan-report.xml
  after_script:
    # Run it again so the output is visible in the job
    - >
      if [ $CI_JOB_STATUS != 'success' ]; then
        vendor/bin/phpstan analyse --memory-limit=-1 --no-progress
      fi
  artifacts:
    expire_in: 1 week
    reports:
      codequality: phpstan-report.xml
  stage: code quality
  needs: ["Install dependencies and build assets"]
  tags:
    - docker

Twig-CS-Fixer - check code styling:
  image: sumocoders/cli-tools-php83:latest
  script:
    - vendor/bin/twig-cs-fixer lint templates/ --report=junit > twigcs-report.xml
  after_script:
    # Run it again so the output is visible in the job
    - vendor/bin/twig-cs-fixer lint templates/
  artifacts:
    expire_in: 1 week
    reports:
      junit: twigcs-report.xml
  stage: code quality
  needs: ["Install dependencies and build assets"]
  tags:
    - docker
  allow_failure: true

#Stylelint - check code styling:
#  image: sumocoders/cli-tools-php83:latest
#  script:
#    - node_modules/.bin/stylelint --output-file=stylelint-report.json --custom-formatter=node_modules/stylelint-formatter-gitlab-code-quality-report/index.js .
#  after_script:
#    # Run it again so the output is visible in the job
#    - node_modules/.bin/stylelint --color .
#  artifacts:
#    expire_in: 1 week
#    reports:
#      codequality: stylelint-report.json
#  stage: code quality
#  needs: ["Install dependencies and build assets"]
#  tags:
#    - docker
#  allow_failure: true

#StandardJS - check code styling:
#  image: sumocoders/cli-tools-php83:latest
#  script:
#    - node_modules/.bin/standard | node_modules/.bin/standard-gitlab --output-file standardjs-report.json --human-readable
#  artifacts:
#    expire_in: 1 week
#    reports:
#      codequality: standardjs-report.json
#  stage: code quality
#  needs: ["Install dependencies and build assets"]
#  tags:
#    - docker
#  allow_failure: true


# Test section
PHPUnit - Run tests:
  image: sumocoders/framework-php83:latest
  services:
    - mysql:5.7
  before_script:
# Uncomment this if you need Chrome for PDF's
# or if you have integration tests that use Symfony Panther (https://github.com/symfony/panther)
#    # install Chromium
#    - apt-get --allow-releaseinfo-change update && apt-get install -y chromium
#    # install Chromium Chromedriver
#    - |
#      curl -s -f -L -o /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE_97`/chromedriver_linux64.zip
#      unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/
  script:
    - php bin/console doctrine:migrations:migrate --env=test --no-interaction --allow-no-migration
    # Uncomment this if you have fixtures that need to be loaded
    # Make sure that you have installed doctrine/doctrine-fixtures-bundle
    #- php bin/console doctrine:fixtures:load --env=test
    - php vendor/bin/simple-phpunit --log-junit phpunit-report.xml
  artifacts:
    reports:
      junit: phpunit-report.xml
  stage: test
  needs: ["Install dependencies and build assets"]
  tags:
    - docker
  variables:
    MYSQL_DATABASE: ci_test
    MYSQL_ROOT_PASSWORD: root
    DATABASE_URL: mysql://root:root@mysql:3306/ci_test?serverVersion=5.7
    PANTHER_NO_SANDBOX: 1
    PANTHER_WEB_SERVER_PORT: 9080


# Deploy section
Deploy - to staging:
  image: sumocoders/cli-tools-php83:latest
  before_script:
    # Add the private SSH key to the CI environment
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - vendor/bin/dep deploy stage=staging
  environment:
    name: staging
    url: https://$project.$client.php83.sumocoders.eu
  only:
    - staging
  stage: deploy
  tags:
    - docker
  variables:
    USER: "CI/CD gitlab-runner"
